export ELASTICSEARCH_IMAGE=docker.elastic.co/elasticsearch/elasticsearch:8.5.1

docker pull $ELASTICSEARCH_IMAGE

docker run --name elastic-helm-charts-certs -i -w /tmp \
		$ELASTICSEARCH_IMAGE \
		/bin/sh -c " \
			elasticsearch-certutil ca --out /tmp/elastic-stack-ca.p12 --pass '' && \
			elasticsearch-certutil cert --name elasticsearch-master --dns elasticsearch-master,elasticsearch-master.elastic --ca /tmp/elastic-stack-ca.p12 --pass '' --ca-pass '' --out /tmp/elastic-certificates.p12"
docker cp elastic-helm-charts-certs:/tmp/elastic-certificates.p12 ./

docker rm -f elastic-helm-charts-certs
openssl pkcs12 -nodes -passin pass:'' -in elastic-certificates.p12 -out elastic-certificate.pem
openssl x509 -outform der -in elastic-certificate.pem -out elastic-certificate.crt

openssl pkcs12 -passin pass:'' -in elastic-certificates.p12 -nodes -nocerts         1> tls.key
openssl pkcs12 -passin pass:'' -in elastic-certificates.p12 -nodes -clcerts -nokeys 1> tls.crt
openssl pkcs12 -passin pass:'' -in elastic-certificates.p12 -nodes -cacerts -nokeys 1> ca.crt

kubectl create secret -n c86-mini generic elasticsearch-master-certs  --from-file=tls.crt  --from-file=tls.key --from-file=ca.crt --type=kubernetes.io/tls

#If this step returns an error, that can be safely ignored
keytool -delete -alias elasticsearch -keystore externaldb.jks
keytool -import -alias elasticsearch -keystore externaldb.jks -storetype jks -file elastic-certificate.crt -storepass changeit -noprompt
kubectl  create secret -n c86-mini generic elastic-jks --from-file=externaldb.jks

rm -f elastic-certificates.p12 elastic-certificate.pem elastic-certificate.crt  externaldb.jks
rm -f tls.crt ca.crt tls.key
